// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract ExploitConstructor {
    event RecoveredAddress(address recovered);
    event MsgHash(bytes32 hash);
    
    function testECRecoverBug() external {
        uint256 lockId = 1338;
        bytes memory signature = new bytes(65);
        
        bytes32 _msgHash;
        assembly {
            mstore(0x00, "\x19Ethereum Signed Message:\n32")
            mstore(0x1C, lockId)
            _msgHash := keccak256(0x00, 0x3c)
        }
        emit MsgHash(_msgHash);
        
        address initialController = address(1);
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, _msgHash)
            mstore(add(ptr, 32), mload(add(signature, 0x60)))
            mstore(add(ptr, 64), mload(add(signature, 0x20)))
            mstore(add(ptr, 96), mload(add(signature, 0x40)))
            
            pop(
                staticcall(
                    gas(),
                    initialController,
                    ptr,
                    0x80,
                    0x00,
                    0x20
                )
            )
            
            if iszero(returndatasize()) {
                initialController := 0
            }
            if gt(returndatasize(), 0) {
                initialController := mload(0x00)
            }
            mstore(0x40, add(ptr, 128))
        }
        
        emit RecoveredAddress(initialController);
    }
}