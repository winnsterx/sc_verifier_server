// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract ImpersonatorExploit {
    // The vulnerability is in the signature hash computation
    // It uses abi.encode([uint256(r), uint256(s), uint256(v)])
    // This creates a dynamic array and encodes it with full ABI encoding
    
    function computeArrayHash(uint256 r, uint256 s, uint256 v) external pure returns (bytes32) {
        return keccak256(abi.encode([r, s, v]));
    }
    
    // This shows what the encoding looks like
    function showEncoding(uint256 r, uint256 s, uint256 v) external pure returns (bytes memory) {
        return abi.encode([r, s, v]);
    }
    
    // The array encoding includes:
    // - offset to the array data (32 bytes)
    // - array length (32 bytes) 
    // - array elements (32 bytes each)
    
    // So for array [r, s, v], the encoding is:
    // 0x0000000000000000000000000000000000000000000000000000000000000020 (offset)
    // 0x0000000000000000000000000000000000000000000000000000000000000003 (length = 3)
    // r (32 bytes)
    // s (32 bytes)
    // v (32 bytes)
}