// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract SignatureExploit {
    // Test what happens with the malformed abi.encode
    function testEncode(bytes32 r, bytes32 s, uint8 v) external pure returns (bytes32) {
        // The bug in the original: abi.encode([uint256(r), uint256(s), uint256(v)])
        // This won't compile, so let's try variations
        
        // What the code might actually be:
        // Option 1: abi.encode(r, s, v)
        return keccak256(abi.encode(r, s, v));
    }
    
    function testEncode2(bytes32 r, bytes32 s, uint8 v) external pure returns (bytes32) {
        // Option 2: abi.encodePacked(r, s, v)
        return keccak256(abi.encodePacked(r, s, v));
    }
    
    function testArray(uint256 r, uint256 s, uint256 v) external pure returns (bytes memory) {
        // What if it's trying to encode an array?
        uint256[] memory arr = new uint256[](3);
        arr[0] = r;
        arr[1] = s;
        arr[2] = v;
        return abi.encode(arr);
    }
}